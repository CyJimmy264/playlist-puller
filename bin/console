#!/usr/bin/env ruby

require "bundler/setup"

require 'active_support/all'
require 'playlist'
require 'playlist/puller'
require 'down'
require 'ruby-progressbar'

require "pry"

MUSIC = "/home/mveynberg/Музыка"
DEST  = "#{MUSIC}/VK"

def sanitize(str)
  str.gsub(/[\\\%\/\-\"]/) { |c| '%%%02X' % c.ord }.truncate(100, separator: /\s/)
end

tracks_hash = {}

def suffix_num_str(suffix_num)
  suffix_num ? " (#{suffix_num})" : ""
end

def track_name(artist, title, suffix_num)
  "#{artist} - #{title}#{suffix_num_str(suffix_num)}"
end

def track_filename(artist, title, suffix_num)
  "#{track_name(artist, title, suffix_num)}.mp3"
end

playlist = nil
File.open(Dir["/home/mveynberg/Музыка/playlist.xspf"].sort.last) do |file|
  playlist = Playlist::Format::XSPF.parse(file)
end

playlist_old = nil
File.open(Dir["/home/mveynberg/Музыка/VK.xspf"].sort.last) do |file|
  playlist_old = Playlist::Format::XSPF.parse(file)
end
durations = playlist_old.tracks.map { |track| [track.location, track.duration < 0 ? 0 : track.duration] }.to_h

playlist_new = Playlist.new(:title => "My awesome playlist")

counter = 0

playlist.tracks.each do |track|
  counter += 1
  title = sanitize track.title
  artist = sanitize track.contributor_names
  suffix_num = nil

  track_fn = "#{track_filename(artist, title, suffix_num)}"
  track_filepath = "#{DEST}/#{track_fn}"

  while tracks_hash[track_filepath]
    suffix_num = suffix_num ? suffix_num + 1 : 1
    track_fn = "#{track_filename(artist, title, suffix_num)}"
    track_filepath = "#{DEST}/#{track_fn}"
  end
  tracks_hash[track_filepath] = true


  if !File.file?(track_filepath)
    if track.location.include? 'audio_api_unavailable'
      puts "Unavailable file #{artist} - #{title} | \t#{track.duration}\n#{track_fn}"

      playlist_new.add_track(
        creator: track.contributor_names,
        title: track.title,
        location: track.location,
        duration: track.duration,
      )
    else
      begin
        `rm -f out.ts`
        puts "Down #{track_name(artist, title, suffix_num)} (#{track_filepath})"
        system("streamlink --output out.ts \"#{track.location}\" best")
        puts "Repack #{track_name(artist, title, suffix_num)} (#{track_filepath})"
        system("ffmpeg -hide_banner -loglevel error -i out.ts -c copy \"#{track_filepath}\"")

        # duration = `sox "#{track_filepath}" -n stat 2>&1 | grep Length`[/([\d\.]+)/].to_f * 1000
        puts "New file #{artist} - #{title} | \t#{track.duration}"

        playlist_new.add_track(
          creator: track.contributor_names,
          title: track.title,
          location: track_filepath,
          duration: track.duration,
        )
      rescue
        puts "Failed"
      end
    end
  else
    duration = if (track.duration || 0) > 0 && track.duration != 25000
                 track.duration
               elsif (durations[track_filepath] || 0) > 0 && durations[track_filepath] != 25000
                 durations[track_filepath]
               else
                 (`sox "#{track_filepath}" -n stat 2>&1 | grep Length`[/([\d\.]+)/].to_f * 1000).to_i.round(-1)
               end

    puts "Old file #{artist} - #{title} | \t#{duration}"

    playlist_new.add_track(
      creator: track.contributor_names,
      title: track.title,
      location: track_filepath,
      duration: duration,
    )
  end
end

File.open("#{MUSIC}/VK.xspf", "w") do |file|
  file.write Playlist::Format::XSPF.generate(playlist_new)
end
